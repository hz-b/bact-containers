#
# Author: Pierre Begemotowitsch     <pierre.schnizer@helmholtz-berlin.de>
#         Wahedullah Sulaiman Khail <Wahedullah.Sulaiman_Khail@helmholtz-berlin.de>
#
#
# Container containing the core components of the digital twin

Bootstrap: docker
From: ubuntu:22.04

%files
    ../downloads/miniconda.sh /build/downloads/

    snippets/*.sh /build/snippets/
    # guessing where wheels will be searched for
    ../wheels/*.whl /build/wheels/
    ../wheels/*.tar.gz /build/wheels/
    ../external-repositories/lat2db /build/

    # EPICS support
    ../external-repositories/epics-base/dbd/* /twin/epics/dbd/
    ../external-repositories/epics-base/lib/linux-x86_64/* /twin/epics/lib/
    ../external-repositories/epics-base/bin/linux-x86_64/* /twin/epics/bin/

    ../external-repositories/PyDevice/lib/linux-x86_64/* /twin/epics/lib/
    ../external-repositories/PyDevice/dbd/* /twin/epics/dbd/

    ../external-repositories/dt4acc/ /build/
    # only copy what is required from dt4acc to dedicated places
    # build is deleted at end of post
    ../external-repositories/dt4acc/dbd/ /twin/epics/dt4acc/
    ../external-repositories/dt4acc/db/  /twin/epics/dt4acc/
    ../external-repositories/dt4acc/bin/  /twin/epics/dt4acc/
    ../external-repositories/dt4acc/iocBoot/  /twin/epics/dt4acc/


%environment
    # Make perl complain less
    # and hopefully also these many local mounts
    LC_ALL="C"
    LANG=$LC_ALL
    export LC_ALL LANG

    /.singularity.d/env/99-zz_custom_env.sh

    # start python environment by default
    . /.singularity_bash

%post
    export DEBIAN_FRONTEND=noninteractive

    cd /build/

    apt-get -q=2 update
    # tzdata ... reducing number of local mounts
    apt-get -q=2 install -y --no-install-recommends \
       ca-certificates \
       less \
       bash \
       git \
       tzdata \
       binutils

    #  ---------------------------------------------------------
    # epics set up
    export TWIN_EPICS_ENV_PATH=/twin/epics/dt4acc/iocBoot/iocvaccel/envPaths
    export TWIN_EPICS_TOP=/twin/epics/dt4acc
    export TWIN_EPICS_BASE=/twin/epics/
    echo '# written during container build'                >  $TWIN_EPICS_ENV_PATH
    echo 'epicsEnvSet("IOC","iocvaccel")'                  >> $TWIN_EPICS_ENV_PATH
    echo 'epicsEnvSet("TOP",        "'$TWIN_EPICS_TOP'")'  >> $TWIN_EPICS_ENV_PATH
    echo 'epicsEnvSet("EPICS_BASE", "'$TWIN_EPICS_BASE'")' >> $TWIN_EPICS_ENV_PATH
    echo '# EOF'                                           >> $TWIN_EPICS_ENV_PATH

    # remove what was copied too much
    find /twin/epics/lib/ -name '*.a' | xargs rm
    find /twin/epics/bin -name '*.pl' | xargs rm
    find /twin/epics/bin -name '*.py' | xargs rm
    find /twin/epics/bin -name 'S99*' | xargs rm
    find /twin/epics/bin -type f -a  ! -name '*.service' | xargs strip
    find /twin/epics/lib -type f | xargs strip
    find /twin/epics/dt4acc/bin -type f | xargs strip
    #  ---------------------------------------------------------
    # conda setup
    bash /build/downloads/miniconda.sh -b -u -p /twin/miniconda3/
    export PATH=/twin/miniconda3/bin:$PATH

    # init for bash
    conda init bash
    conda update -y -q conda
    conda install wheel readline
    # c compiler if so
    conda install -q  -c conda-forge cxx-compiler

    # later on for building PyDevice
    ln -s /twin/miniconda3/bin/python3-config /twin/miniconda3/bin/python-config

    #  ---------------------------------------------------------
    # add /twin/lib so that it will be used by ldconfig
    # do not forget to run ldconfig after everything has been
    # installed
    opt_conf_path=/etc/ld.so.conf.d/twin.conf
    echo '# parts built during process go here' >  $opt_conf_path
    echo '/twin/lib'                            >> $opt_conf_path
    echo '/twin/epics/lib'                      >> $opt_conf_path
    echo '#EOF'                                 >> $opt_conf_path

    ldconfig

    #  ---------------------------------------------------------
    # installing python packages using conda and pip
    cd /build/

    # install required packages as much as possible from conda
    conda install -q  --channel=conda-forge --solver=classic \
                 wheel fastapi pymongo pydantic typing attrs \
                 uvicorn httpx numpy scipy \
    # install what is missing
    python3 -m pip install lark jsons uuid datetime

    # installing required packages
    . /build/snippets/bact_package_functions.sh

    echo "adding bact packages"
    install_python_package_from_github bact-device-models
    echo "added bact packages"

    python3 -m pip install accelerator-toolbox
    python3 -m pip install lat2db/ dt4acc/src/

    # ------------------------------------------------------------
    # clean up
    #
    #
    cd /
    rm -r /build/
    # first pip ... can disapper later on
    pip3 cache purge
    # conda remove -q -y --solver=classic cxx-compiler
    conda clean --all -y

    rm -rf /.cache
    rm -rf /root/.cache
    rm -rf /build/wheels

    apt-get clean
    dpkg -r git  binutils
    apt-get autoremove -y
    apt-get clean
    rm -rf /var/lib/apt/lists/*

    CUSTOM_ENV='/.singularity.d/env/99-zz_custom_env.sh'
    cat >$CUSTOM_ENV <<EOF
#!/bin/bash
PS1='Epics Boa twin \w > '
export PATH=/twin/epics/bin:/twin/miniconda3/bin:$PATH
EOF

    chmod 755 "$CUSTOM_ENV"

    echo '# use custom PS1 '                          >> /etc/bash.bashrc
    echo '. /.singularity.d/env/99-zz_custom_env.sh'  >> /etc/bash.bashrc
    echo '# end custom PS1 '                          >> /etc/bash.bashrc

%runscript
    # perhaps to be moded to %startscript
    # currently run in an interactive manner
    (cd /twin/epics/dt4acc/iocBoot/iocvaccel && ./st.sh)
#
# Author: Markus Ries               <markus.ries@helmholtz-berlin.de>
#         Wahedullah Sulaiman Khail <Wahedullah.Sulaiman_Khail@helmholtz-berlin.de>
#         Pierre Begemotowitsch     <pierre.schnizer@helmholtz-berlin.de>
#         Teresia Olsson            <teresia.olsson@helmholtz-berlin.de>
#
# Container containing the core components of the digital twin

# Bootstrap: docker
# From: ubuntu:22.04

Bootstrap: localimage
From: ../build/epics7-pydevice.sif

%files
    snippets/bact_packages.sh /build/snippets/

%post
    # number of build jobs: preset for for a moderate machine
    # N_JOBS=48

    export DEBIAN_FRONTEND=noninteractive

    # so that secrets only need to be inserted once
    git config  --global credential.helper cache --timeout=36000
 
    # setups ------------------------------------------------------------
    # put here so less surprise down after a long build time
    CMAKE_BUILD_DIR=build
    if [ -e  "$CMAKE_BUILD_DIR" ]
    then
       if [ ! -d "$CMAKE_BUILD_DIR" ]
       then
	    echo "build exists and is not a dir!"
       fi
    else
        mkdir $CMAKE_BUILD_DIR
    fi
    cd $CMAKE_BUILD_DIR
    CMAKE_BUILD_DIR=`pwd`
    echo "CMAKE_BUILD_DIR: $CMAKE_BUILD_DIR"

    # packages built here are installed to /twin
    # thor scsi needs to find gtpsa cmake config
    CMAKE_PREFIX_PATH=/twin/lib/cmake

    # add /twin/lib so that it will be used by ldconfig
    # do not forget to run ldconfig after everything has been
    # installed
    opt_conf_path=/etc/ld.so.conf.d/twin.conf
    echo '# parts built during process go here' >  $opt_conf_path
    echo '/twin/lib'                            >> $opt_conf_path
    echo '#EOF'                                 >> $opt_conf_path


    echo "ld config for opt"
    cat $opt_conf_path
    echo "Release local"
    cat $release_local

    # end setups ---------------------------------------------------------


    # run ldconfig ... to check that it exists and works
    # don't need to find out after half an hour build
    /sbin/ldconfig
    
    # update pip
    pip3 install --upgrade pip wheel

    # installing bact packages
    # installed before building packages: some packages are local and
    # need the token
    /bin/bash /build/snippets/bact_packages.sh
    
    # gtpsa-cpp -----------------------------------------------------------
    echo 'building gtpsa --------------------------------------------------'
    git clone https://github.com/hz-b/gtpsa-cpp.git
    cd gtpsa-cpp
    # get mad-ng ... but only this submodule
    git submodule init
    git submodule update

    # get ready to build here
    mkdir build
    cmake -B build .
    # be nice and kick up the number of processors
    nice -15 make -C build -j $N_JOBS

    # skip make test for now, two tests have to be fixed
    cmake --install build --prefix /twin/
    cd ..
    echo 'building gtpsa done ---------------------------------------------'
    # end gtpsa-cpp -------------------------------------------------------

    echo "CMAKE PREFIX PATH $CMAKE_PREFIX_PATH"
    ls $CMAKE_PREFIX_PATH
    # build thor scsi need to inform where c++ librarires are installed
    export gtpsa_DIR=/twin/lib/cmake
    

    # thor-scsi-lib -------------------------------------------------------
    echo 'building thor scsi lib ------------------------------------------'
    git clone https://github.com/hz-b/thor-scsi-lib.git
    cd thor-scsi-lib
    # only check out flame .. no subrepos of flame are needed
    git submodule init
    git submodule update

    # better a separate build directory
    mkdir build

    cmake -B build .
    nice -15 make -C build -j $N_JOBS
    # skip make test for now, two tests have to be fixed
    cmake --install build --prefix /twin/
    # back where we were
    cd ..
    echo 'building thor scsi lib done -------------------------------------'
    # end thor-scsi-lib ---------------------------------------------------


    # install gtpsa and thor scsi python module
    #    need to inform where c++ librarires are installed
    export gtpsa_PREFIX=/twin
    export thor_scsi_PREFIX=/twin


    # dt4acc --------------------------------------------------------------
    # echo 'building dt4acc--------------------------------------------------'
    git clone https://github.com/hz-b/dt4acc.git dt4acc
    cd dt4acc
    # git checkout dev/feature/as-shadow
    git config pull.rebase false
    git pull
    make -j $N_JOBS
    make -j $N_JOBS install
    cd ..
    echo 'building and install python packages done -----------------------'
    # echo 'end building dt4acc----------------------------------------------'
    # end dt4acc ----------------------------------------------------------

    echo 'debug info ------------------------------------------------------'
    pwd
    find . -type d
    echo 'end debug info --------------------------------------------------'

    echo 'cleaning build directories --------------------------------------'
    # epics pydevice thor scsi / gtpsa builds and installations done
    # here do clean up
    # but not yet .. need to see how epics is installed
    # rm -rf /$CMAKE_BUILD_DIR
    echo 'debug info ------------------------------------------------------'
    pwd
    find . -type d
    echo 'end debug info --------------------------------------------------'
    echo 'building and install python packages ----------------------------'

    pip3 install -v -r ./gtpsa-cpp/python/requirements.txt
    pip3 install -v ./gtpsa-cpp/python
    pip3 install -v -r ./thor-scsi-lib/python/requirements.txt
    pip3 install -v ./thor-scsi-lib/python


    echo '### remove apt-get cache ###'
    apt-get clean
    rm -rf /var/lib/apt/lists/*

    echo '### clearing pip cache ###'
    pip3 cache purge

    echo '### remove pip cache ###'
    rm -rf /.cache

    # find / -type f > /var/log/files.txt || echo 'done'
    # chmod 666 /var/log/files.txt
    echo 'cleaning build directories done ------------------------------------'

    /sbin/ldconfig

%runscript
    (cd /build/dt4acc/iocBoot/iocvaccel && /bin/sh ./st.sh)